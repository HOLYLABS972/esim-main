import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { collection, query, where, getDocs, doc, updateDoc, deleteDoc, writeBatch } from 'firebase/firestore';
import { db } from '../firebase/config';
import { esimService } from '../services/esimService';
import { motion } from 'framer-motion';
import { 
  Settings, 
  Globe, 
  RefreshCw, 
  Trash2, 
  Edit, 
  Eye, 
  EyeOff, 
  ToggleLeft, 
  ToggleRight,
  Search,
  Download,
  AlertTriangle,
  Info
} from 'lucide-react';
import toast from 'react-hot-toast';

const AdminDashboard = () => {
  const { currentUser, userProfile } = useAuth();
  const [currentEnvironment, setCurrentEnvironment] = useState('test');
  const [currentStripeMode, setCurrentStripeMode] = useState('test');
  const [dataplansApiKey, setDataplansApiKey] = useState('');
  const [showApiKey, setShowApiKey] = useState(false);
  const [countries, setCountries] = useState([]);
  const [filteredCountries, setFilteredCountries] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [syncStatus, setSyncStatus] = useState('Ready to sync data from DataPlans API');
  const [plans, setPlans] = useState([]);
  const [showPlansModal, setShowPlansModal] = useState(false);
  const [selectedCountry, setSelectedCountry] = useState(null);
  const [allPlans, setAllPlans] = useState([]);

  // Check if user is admin (temporarily disabled for testing)
  const isAdmin = true; // currentUser?.email === 'support@theholylabs.com' || 
                  // currentUser?.email === 'admin@example.com' || 
                  // userProfile?.role === 'admin';

  useEffect(() => {
    if (!isAdmin) {
      toast.error('Access denied. Admin privileges required.');
      return;
    }

    loadSavedConfig();
    loadCountriesFromFirestore();
    loadDataplansApiKey();
  }, [isAdmin]);

  useEffect(() => {
    // Filter countries based on search term
    const filtered = countries.filter(country => 
      country.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      country.code?.toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredCountries(filtered);
  }, [countries, searchTerm]);

  // Load DataPlans API key from Firestore
  const loadDataplansApiKey = async () => {
    try {
      const configDoc = await getDocs(query(collection(db, 'config'), where('__name__', '==', 'dataplans')));
      if (!configDoc.empty) {
        const data = configDoc.docs[0].data();
        setDataplansApiKey(data.api_key || '');
      }
    } catch (error) {
      console.error('Error loading DataPlans API key:', error);
    }
  };

  // Save DataPlans API key to Firestore
  const saveDataplansApiKey = async () => {
    if (!dataplansApiKey.trim()) {
      toast.error('Please enter a DataPlans API key');
      return;
    }

    try {
      await updateDoc(doc(db, 'config', 'dataplans'), {
        api_key: dataplansApiKey,
        updated_at: new Date(),
        updated_via: 'admin_panel'
      });
      toast.success('DataPlans API key saved successfully');
    } catch (error) {
      console.error('Error saving DataPlans API key:', error);
      toast.error(`Error saving API key: ${error.message}`);
    }
  };

  // Toggle environment (test/production)
  const toggleEnvironment = async () => {
    const newEnv = currentEnvironment === 'test' ? 'prod' : 'test';
    setCurrentEnvironment(newEnv);
    localStorage.setItem('esim_environment', newEnv);
    
    try {
      await updateDoc(doc(db, 'config', 'environment'), {
        mode: newEnv,
        updated_at: new Date(),
        updated_via: 'admin_panel'
      });
      toast.success(`Switched to ${newEnv === 'test' ? 'Test' : 'Production'} DataPlans environment`);
    } catch (error) {
      console.error('Error updating environment config:', error);
      toast.error('Environment switched locally, but failed to sync with Firebase');
    }
  };

  // Toggle Stripe payment mode
  const toggleStripeMode = async () => {
    const newMode = currentStripeMode === 'test' ? 'live' : 'test';
    setCurrentStripeMode(newMode);
    localStorage.setItem('esim_stripe_mode', newMode);
    
    try {
      await updateDoc(doc(db, 'config', 'stripe'), {
        mode: newMode,
        updated_at: new Date(),
        updated_via: 'admin_panel'
      });
      toast.success(`Switched to ${newMode === 'test' ? 'Test' : 'Live'} Stripe payments`);
    } catch (error) {
      console.error('Error updating Stripe config:', error);
      toast.error('Mode switched locally, but failed to sync with Firebase');
    }
  };

  // Fetch countries from DataPlans API via Firebase Functions
  const fetchCountriesFromAPI = async () => {
    setLoading(true);
    setSyncStatus('Fetching countries via Firebase Functions...');

    try {
      // This would call a Firebase Function to sync data
      // For now, we'll simulate with a timeout and show success
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setSyncStatus('Successfully fetched and synced countries from DataPlans API');
      toast.success('Countries fetched and synced successfully');
      
      // Reload countries from Firestore
      await loadCountriesFromFirestore();
    } catch (error) {
      console.error('Error fetching countries:', error);
      setSyncStatus(`Error: ${error.message}`);
      toast.error(`Error fetching countries: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Delete all countries from Firestore
  const deleteAllCountriesFromFirestore = async () => {
    if (!window.confirm('DELETE ALL COUNTRIES from Firestore? This action cannot be undone!')) {
      return;
    }

    if (!window.confirm('Are you absolutely sure? This will delete all countries from your database!')) {
      return;
    }

    setLoading(true);
    setSyncStatus('Deleting all countries from Firestore...');

    try {
      const countriesSnapshot = await getDocs(collection(db, 'countries'));
      const batch = writeBatch(db);

      countriesSnapshot.forEach((doc) => {
        batch.delete(doc.ref);
      });

      await batch.commit();
      setSyncStatus(`Successfully deleted ${countriesSnapshot.size} countries from Firestore`);
      toast.success(`Successfully deleted ${countriesSnapshot.size} countries from Firestore`);
      
      // Clear the display
      setCountries([]);
      setFilteredCountries([]);
    } catch (error) {
      console.error('Error deleting all countries:', error);
      setSyncStatus(`Error deleting all countries: ${error.message}`);
      toast.error(`Error deleting all countries: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Delete a single country from Firestore
  const deleteCountryFromFirestore = async (countryCode) => {
    if (!window.confirm(`Delete ${countryCode} from Firestore? This action cannot be undone.`)) {
      return;
    }

    setSyncStatus(`Deleting ${countryCode} from Firestore...`);

    try {
      await deleteDoc(doc(db, 'countries', countryCode));
      setSyncStatus(`Successfully deleted ${countryCode} from Firestore`);
      toast.success(`Successfully deleted ${countryCode} from Firestore`);
      
      // Refresh the list
      await loadCountriesFromFirestore();
    } catch (error) {
      console.error('Error deleting from Firestore:', error);
      setSyncStatus(`Error deleting from Firestore: ${error.message}`);
      toast.error(`Error deleting from Firestore: ${error.message}`);
    }
  };

  // Show country plans
  const showCountryPlans = async (countryCode, countryName) => {
    try {
      const plansSnapshot = await getDocs(
        query(collection(db, 'plans'), where('country_codes', 'array-contains', countryCode))
      );
      
      const countryPlans = [];
      plansSnapshot.forEach(doc => {
        countryPlans.push({ id: doc.id, ...doc.data() });
      });

      setPlans(countryPlans);
      setSelectedCountry({ code: countryCode, name: countryName });
      setShowPlansModal(true);
    } catch (error) {
      console.error('Error fetching plans:', error);
      toast.error(`Error fetching plans for ${countryName}: ${error.message}`);
    }
  };

  // Load all plans for editing
  const loadAllPlans = async () => {
    try {
      const plansSnapshot = await getDocs(collection(db, 'plans'));
      const plans = [];
      plansSnapshot.forEach(doc => {
        plans.push({ id: doc.id, ...doc.data() });
      });
      setAllPlans(plans);
      return plans;
    } catch (error) {
      console.error('Error loading all plans:', error);
      toast.error(`Error loading plans: ${error.message}`);
      return [];
    }
  };

  // Update plan price
  const updatePlanPrice = async (planId, newPrice) => {
    try {
      await updateDoc(doc(db, 'plans', planId), {
        price: newPrice,
        updated_at: new Date(),
        price_updated_via: 'admin_panel'
      });
      toast.success('Plan price updated successfully');
      
      // Refresh plans if modal is open
      if (showPlansModal && selectedCountry) {
        await showCountryPlans(selectedCountry.code, selectedCountry.name);
      }
    } catch (error) {
      console.error('Error updating plan price:', error);
      toast.error(`Error updating price: ${error.message}`);
    }
  };

  // Delete plan
  const deletePlan = async (planId, planName) => {
    if (!window.confirm(`Are you sure you want to delete the plan "${planName}"?\n\nThis action cannot be undone and will remove the plan from all countries.`)) {
      return;
    }

    try {
      await deleteDoc(doc(db, 'plans', planId));
      toast.success(`Successfully deleted plan "${planName}"`);
      
      // Refresh plans if modal is open
      if (showPlansModal && selectedCountry) {
        await showCountryPlans(selectedCountry.code, selectedCountry.name);
      }
    } catch (error) {
      console.error('Error deleting plan:', error);
      toast.error(`Error deleting plan: ${error.message}`);
    }
  };

  const loadSavedConfig = () => {
    const savedEnv = localStorage.getItem('esim_environment');
    const savedStripeMode = localStorage.getItem('esim_stripe_mode');
    
    if (savedEnv) {
      setCurrentEnvironment(savedEnv);
    }
    
    if (savedStripeMode) {
      setCurrentStripeMode(savedStripeMode);
    }
  };

  const saveApiConfig = () => {
    if (!apiToken.trim()) {
      toast.error('Please enter an API token');
      return;
    }
    
    localStorage.setItem('esim_api_token', apiToken);
    toast.success('API configuration saved successfully');
  };

  const toggleEnvironment = () => {
    const newEnv = currentEnvironment === 'test' ? 'prod' : 'test';
    setCurrentEnvironment(newEnv);
    localStorage.setItem('esim_environment', newEnv);
    toast.success(`Switched to ${newEnv === 'test' ? 'Test' : 'Production'} environment`);
  };

  const fetchCountriesFromAPI = async () => {
    setLoading(true);
    setSyncStatus('Fetching countries via Firebase Functions...');

    try {
      const result = await esimService.syncCountriesFromApi();
      
      if (result.success) {
        setSyncStatus(`Successfully fetched and synced ${result.message}`);
        toast.success(`Fetched and synced countries successfully`);
        await loadCountriesFromFirestore();
      } else {
        throw new Error(result.error || 'Unknown error occurred');
      }
    } catch (error) {
      console.error('Error fetching countries:', error);
      setSyncStatus(`Error: ${error.message}`);
      toast.error(`Error fetching countries: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };



  const loadCountriesFromFirestore = async () => {
    setSyncStatus('Loading countries from Firestore...');

    try {
      const snapshot = await getDocs(collection(db, 'countries'));
      const countriesData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      setCountries(countriesData);
      setSyncStatus(`Loaded ${countriesData.length} countries from Firestore`);
      toast.success(`Loaded ${countriesData.length} countries from Firestore`);
    } catch (error) {
      console.error('Error loading from Firestore:', error);
      setSyncStatus(`Error loading from Firestore: ${error.message}`);
      toast.error(`Error loading from Firestore: ${error.message}`);
    }
  };

  const deleteCountryFromFirestore = async (countryCode) => {
    if (!window.confirm(`Delete ${countryCode} from Firestore? This action cannot be undone.`)) {
      return;
    }

    try {
      await deleteDoc(doc(db, 'countries', countryCode));
      toast.success(`Successfully deleted ${countryCode} from Firestore`);
      await loadCountriesFromFirestore();
    } catch (error) {
      console.error('Error deleting from Firestore:', error);
      toast.error(`Error deleting from Firestore: ${error.message}`);
    }
  };

  const deleteAllCountriesFromFirestore = async () => {
    if (!window.confirm('DELETE ALL COUNTRIES from Firestore? This action cannot be undone!')) {
      return;
    }

    if (!window.confirm('Are you absolutely sure? This will delete all countries from your database!')) {
      return;
    }

    setLoading(true);
    setSyncStatus('Deleting all countries from Firestore...');

    try {
      const snapshot = await getDocs(collection(db, 'countries'));
      const batch = writeBatch(db);

      snapshot.forEach(doc => {
        batch.delete(doc.ref);
      });

      await batch.commit();
      setSyncStatus(`Successfully deleted ${snapshot.size} countries from Firestore`);
      toast.success(`Successfully deleted ${snapshot.size} countries from Firestore`);
      setCountries([]);
    } catch (error) {
      console.error('Error deleting all countries:', error);
      setSyncStatus(`Error deleting all countries: ${error.message}`);
      toast.error(`Error deleting all countries: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const loadPlansForCountry = async (countryCode, countryName) => {
    try {
      const snapshot = await getDocs(
        query(collection(db, 'plans'), where('country_codes', 'array-contains', countryCode))
      );
      
      const plansData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      setPlans(plansData);
      setSelectedCountry({ code: countryCode, name: countryName });
      setShowPlansModal(true);
    } catch (error) {
      console.error('Error fetching plans:', error);
      toast.error(`Error fetching plans for ${countryName}: ${error.message}`);
    }
  };

  const loadAllPlans = async () => {
    try {
      const snapshot = await getDocs(collection(db, 'plans'));
      const plansData = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      setPlans(plansData);
      setSelectedCountry({ code: 'ALL', name: 'All Plans' });
      setShowPlansModal(true);
    } catch (error) {
      console.error('Error fetching all plans:', error);
      toast.error(`Error fetching plans: ${error.message}`);
    }
  };

  const updatePlanPrice = async (planId, planName, newPrice, currency) => {
    try {
      await updateDoc(doc(db, 'plans', planId), {
        price: newPrice,
        updated_at: new Date(),
        price_updated_via: 'admin_panel'
      });

      toast.success(`Successfully updated price for "${planName}" to $${newPrice.toFixed(2)} ${currency}`);
      
      // Refresh plans
      if (selectedCountry?.code === 'ALL') {
        await loadAllPlans();
      } else {
        await loadPlansForCountry(selectedCountry.code, selectedCountry.name);
      }
    } catch (error) {
      console.error('Error updating plan price:', error);
      toast.error(`Error updating price: ${error.message}`);
    }
  };

  const updatePlanCountries = async (planId, planName, countryCodes) => {
    try {
      await updateDoc(doc(db, 'plans', planId), {
        country_codes: countryCodes,
        updated_at: new Date(),
        countries_updated_via: 'admin_panel'
      });

      toast.success(`Successfully updated countries for "${planName}". Now available in: ${countryCodes.join(', ')}`);
      
      // Refresh plans
      if (selectedCountry?.code === 'ALL') {
        await loadAllPlans();
      } else {
        await loadPlansForCountry(selectedCountry.code, selectedCountry.name);
      }
    } catch (error) {
      console.error('Error updating plan countries:', error);
      toast.error(`Error updating countries: ${error.message}`);
    }
  };

  const editPlanPrice = (planId, planName, currentPrice, currency) => {
    const newPrice = prompt(`Edit price for "${planName}":\n\nCurrent price: $${currentPrice.toFixed(2)} ${currency}\n\nEnter new price:`, currentPrice.toFixed(2));
    
    if (newPrice !== null && newPrice !== '') {
      const price = parseFloat(newPrice);
      if (isNaN(price) || price < 0) {
        toast.error('Invalid price. Please enter a valid number.');
        return;
      }
      
      updatePlanPrice(planId, planName, price, currency);
    }
  };

  const editPlanCountries = (planId, planName, currentCountries) => {
    const currentCountriesText = (currentCountries || []).join(', ') || 'None';
    const newCountries = prompt(`Edit countries for "${planName}":\n\nCurrent countries: ${currentCountriesText}\n\nEnter country codes separated by commas (e.g., US, GB, DE, FR):\n\nCommon codes:\nUS=United States, GB=United Kingdom, DE=Germany, FR=France\nCH=Switzerland, IT=Italy, ES=Spain, AU=Australia, CA=Canada`, currentCountriesText);
    
    if (newCountries !== null) {
      const countryCodes = newCountries
        .split(',')
        .map(code => code.trim().toUpperCase())
        .filter(code => code.length >= 2);
      
      if (countryCodes.length === 0) {
        toast.error('Please enter at least one valid country code.');
        return;
      }
      
      updatePlanCountries(planId, planName, countryCodes);
    }
  };

  if (!isAdmin) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h2>
          <p className="text-gray-600">Admin privileges required to access this page.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="space-y-8"
      >
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center space-x-4">
            <div className="bg-blue-100 p-3 rounded-full">
              <Settings className="w-8 h-8 text-blue-600" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                eSIM Admin Panel
              </h1>
              <p className="text-gray-600">
                Manage your eSIM service configuration and data synchronization
              </p>
            </div>
          </div>
        </div>

        {/* Configuration Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Environment Toggle */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <ToggleLeft className="w-5 h-5 text-blue-600 mr-2" />
              Environment
            </h2>
            <div className="flex items-center justify-between">
              <div>
                <span className="text-gray-700 font-medium">Current Mode:</span>
                <span className={`ml-2 px-2 py-1 rounded-full text-xs font-semibold ${
                  currentEnvironment === 'test' 
                    ? 'bg-yellow-100 text-yellow-800' 
                    : 'bg-green-100 text-green-800'
                }`}>
                  {currentEnvironment === 'test' ? 'Test' : 'Production'}
                </span>
              </div>
              <button
                onClick={toggleEnvironment}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
              >
                {currentEnvironment === 'test' ? <ToggleLeft className="w-4 h-4" /> : <ToggleRight className="w-4 h-4" />}
                <span>Toggle</span>
              </button>
            </div>
            <p className="text-sm text-gray-500 mt-3">
              Toggle between test (sandbox) and production environments
            </p>
          </div>

          {/* API Configuration */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Globe className="w-5 h-5 text-green-600 mr-2" />
              API Configuration
            </h2>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  DataPlans API Token
                </label>
                <div className="flex">
                  <input
                    type={showToken ? 'text' : 'password'}
                    value={apiToken}
                    onChange={(e) => setApiToken(e.target.value)}
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter API token"
                  />
                  <button
                    onClick={() => setShowToken(!showToken)}
                    className="px-3 py-2 bg-gray-200 border border-l-0 border-gray-300 rounded-r-md hover:bg-gray-300"
                  >
                    {showToken ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                  </button>
                </div>
              </div>
              <button
                onClick={saveApiConfig}
                className="w-full px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center"
              >
                <Download className="w-4 h-4 mr-2" />
                Save Configuration
              </button>
            </div>
          </div>
        </div>

        {/* Data Management Section */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4 flex items-center">
            <RefreshCw className="w-5 h-5 text-purple-600 mr-2" />
            Data Synchronization
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <button
              onClick={fetchCountriesFromAPI}
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center disabled:opacity-50"
            >
              {loading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              ) : (
                <Download className="w-4 h-4 mr-2" />
              )}
              Fetch & Sync from DataPlans API
            </button>
            <button
              onClick={loadAllPlans}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center"
            >
              <Edit className="w-4 h-4 mr-2" />
              Edit Plans & Prices
            </button>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="font-semibold text-gray-700 mb-2">Sync Status</h3>
            <div className="text-sm text-gray-600">{syncStatus}</div>
          </div>
        </div>

        {/* Countries Display Section */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-semibold flex items-center">
              <Globe className="w-5 h-5 text-red-600 mr-2" />
              Countries Data
              <span className="text-sm text-gray-500 font-normal ml-2">
                ({countries.length} countries)
              </span>
            </h2>
            <div className="flex space-x-2">
              <button
                onClick={deleteAllCountriesFromFirestore}
                disabled={loading}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center disabled:opacity-50"
              >
                <Trash2 className="w-4 h-4 mr-2" />
                Delete All from Firestore
              </button>
            </div>
          </div>

          {/* Search */}
          <div className="mb-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search countries..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Countries Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {filteredCountries.length === 0 ? (
              <div className="col-span-full text-center text-gray-500 py-12">
                <Globe className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <p>
                  {searchTerm ? 'No countries found matching your search.' : 'No countries loaded. Click "Fetch Countries" to load data.'}
                </p>
              </div>
            ) : (
              filteredCountries.map((country) => (
                <div
                  key={country.id}
                  className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-all cursor-pointer"
                  onClick={() => loadPlansForCountry(country.code, country.name)}
                >
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold text-gray-900">{country.name}</h3>
                    <div className="flex items-center space-x-2">
                      <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded font-mono">
                        {country.code}
                      </span>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          deleteCountryFromFirestore(country.code);
                        }}
                        className="text-red-600 hover:text-red-800 p-1"
                        title="Delete from Firestore"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  <div className="space-y-2 text-sm text-gray-600">
                    {country.region && (
                      <p className="flex items-center">
                        <Globe className="w-3 h-3 mr-2" />
                        {country.region}
                      </p>
                    )}
                    {country.currency && (
                      <p className="flex items-center">
                        <span className="mr-2">💰</span>
                        {country.currency}
                      </p>
                    )}
                    <p className="text-blue-600 font-medium mt-2 flex items-center">
                      <Edit className="w-3 h-3 mr-2" />
                      Click to view plans & edit prices
                    </p>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </motion.div>

      {/* Plans Modal */}
      {showPlansModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold text-gray-900 flex items-center">
                  <Edit className="w-6 h-6 text-green-600 mr-2" />
                  {selectedCountry?.code === 'ALL' ? 'Plan Editor' : `Plans for ${selectedCountry?.name}`}
                  <span className="text-sm text-gray-500 font-normal ml-2">
                    ({plans.length} plans)
                  </span>
                </h2>
                <button
                  onClick={() => setShowPlansModal(false)}
                  className="text-gray-500 hover:text-gray-700"
                >
                  <span className="text-2xl">×</span>
                </button>
              </div>
              {selectedCountry?.code === 'ALL' && (
                <div className="mt-3 text-sm text-gray-600 flex items-center">
                  <Info className="w-4 h-4 mr-2" />
                  Click "Edit Price" on any plan to modify pricing. Changes are saved instantly to Firebase.
                </div>
              )}
            </div>
            
            <div className="p-6 max-h-[70vh] overflow-y-auto">
              {plans.length === 0 ? (
                <div className="text-center py-12 text-gray-500">
                  <Globe className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>No plans found for {selectedCountry?.name}</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {plans.map((plan) => (
                    <div key={plan.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-900 mb-2">{plan.name || 'Unnamed Plan'}</h3>
                          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm">
                            <div>
                              <span className="text-gray-500">Capacity:</span>
                              <span className="font-medium">{(plan.capacity === 0 || plan.capacity === -1 || plan.capacity === 'Unlimited') ? 'Unlimited' : `${plan.capacity || 'N/A'} GB`}</span>
                            </div>
                            <div>
                              <span className="text-gray-500">Period:</span>
                              <span className="font-medium">${plan.period || 'N/A'} days</span>
                            </div>
                            <div>
                              <span className="text-gray-500">Current Price:</span>
                              <span className="font-medium text-green-600">
                                ${(plan.price || 0).toFixed(2)} ${plan.currency || 'USD'}
                              </span>
                            </div>
                            <div>
                              <span className="text-gray-500">Operator:</span>
                              <span className="font-medium">
                                {plan.operator?.name || plan.operator || 'N/A'}
                              </span>
                            </div>
                            {selectedCountry?.code === 'ALL' && (
                              <div>
                                <span className="text-gray-500">Countries:</span>
                                <span className="font-medium">{(plan.country_codes || []).length} countries</span>
                                <div className="text-xs text-gray-400 mt-1">
                                  {(plan.country_codes || []).slice(0, 3).join(', ')}
                                  {(plan.country_codes || []).length > 3 ? '...' : ''}
                                </div>
                              </div>
                            )}
                          </div>
                          {plan.description && (
                            <p className="text-gray-600 mt-2 text-sm">{plan.description}</p>
                          )}
                        </div>
                        <div className="ml-4 flex flex-col space-y-2">
                          <button
                            onClick={() => editPlanPrice(plan.id, plan.name, plan.price || 0, plan.currency || 'USD')}
                            className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center"
                          >
                            <Edit className="w-3 h-3 mr-1" />
                            Edit Price
                          </button>
                          <button
                            onClick={() => editPlanCountries(plan.id, plan.name, plan.country_codes || [])}
                            className="px-3 py-1 bg-purple-600 text-white rounded text-sm hover:bg-purple-700 flex items-center"
                          >
                            <Globe className="w-3 h-3 mr-1" />
                            Edit Countries
                          </button>
                          <span className="text-xs text-gray-500">{plan.slug || plan.id}</span>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
            
            <div className="p-6 border-t border-gray-200 bg-gray-50">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">
                  Found {plans.length} plan(s) for {selectedCountry?.name}
                </span>
                <button
                  onClick={() => setShowPlansModal(false)}
                  className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminDashboard;
